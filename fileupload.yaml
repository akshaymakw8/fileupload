AWSTemplateFormatVersion: '2010-09-09'
Description: File Upload Tool (Presigned URL + Notify Logging) with S3, Lambda, API Gateway, Amplify, and Custom Domain

Parameters:
  GitHubRepo:
    Type: String
    Description: 'GitHub repo in format "owner/repo"'

  GitHubAccessToken:
    Type: String
    NoEcho: true
    Description: 'GitHub token with repo + admin:repo_hook'

  UploadPassword:
    Type: String
    NoEcho: true
    Description: 'Password for uploads'

  S3BucketName:
    Type: String
    Description: 'Bucket name for file storage'

  LambdaCodeBucket:
    Type: String
    Description: 'S3 bucket with lambda.zip'

  LambdaCodeKey:
    Type: String
    Description: 'S3 key for lambda.zip'

  CompanyName:
    Type: String
    Default: "AI Guru"
    Description: 'Displayed in UI'

  CustomDomainName:
    Type: String
    Description: 'e.g. aiguru.in'

  CustomDomainPrefix:
    Type: String
    Default: "fileupload"
    Description: 'e.g. fileupload'

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${CustomDomainPrefix}Lambda"
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          UPLOAD_PASSWORD: !Ref UploadPassword
          BUCKET_NAME: !Ref S3BucketName

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FileUploadAPI
      Description: Upload API with notify logging
      EndpointConfiguration:
        Types: [REGIONAL]

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiGatewayNotifyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiGatewayResource
      PathPart: notify

  ApiGatewayNotifyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayNotifyResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayNotifyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayNotifyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayOptionsMethod
      - ApiGatewayNotifyMethod
      - ApiGatewayNotifyOptions
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  AmplifyServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AmplifyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*  
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: FileUploadApp
      Repository: !Ref GitHubRepo
      AccessToken: !Ref GitHubAccessToken
      IAMServiceRole: !GetAtt AmplifyServiceRole.Arn
      EnableBranchAutoDeletion: true
      BuildSpec: |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - sed -i "s|%%API_URL%%|$API_URL|g" index.html
                - sed -i "s|%%COMPANY_NAME%%|$COMPANY_NAME|g" index.html
            build:
              commands:
                - echo "Build complete"
          artifacts:
            baseDirectory: .
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
      EnvironmentVariables:
        - Name: API_URL
          Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload'
        - Name: COMPANY_NAME
          Value: !Ref CompanyName

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    DependsOn: AmplifyApp
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: "main"
      EnableAutoBuild: true
      Stage: PRODUCTION
      Framework: NONE

  AmplifyDomain:
    Type: AWS::Amplify::Domain
    DependsOn: AmplifyBranch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      DomainName: !Ref CustomDomainName
      SubDomainSettings:
        - Prefix: !Ref CustomDomainPrefix
          BranchName: main
      EnableAutoSubDomain: false

Outputs:
  AmplifyAppUrl:
    Value: !Sub 'https://main.${AmplifyApp.DefaultDomain}'
  CustomDomainUrl:
    Value: !Sub 'https://${CustomDomainPrefix}.${CustomDomainName}'
  ApiUrl:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload'
